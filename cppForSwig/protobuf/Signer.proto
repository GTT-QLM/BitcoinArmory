syntax = "proto2";

import "Utxo.proto";

package Codec_SignerState;

enum StackEntryState_Types
{
    OpCode = 1;
    SingleSig = 2;
    MultiSig = 3;
    PushData = 4;
    Script = 5;
};

message StackEntryState_Data
{
    repeated bytes data = 1;
};

message StackEntryState_Sig
{
    required bytes script = 1;
    required bytes pubkey = 2;
};

message StackEntryState_MultiSig
{
    required bytes  script = 1;

    repeated uint32 sig_index = 10;
    repeated bytes  sig_data = 11;
};

message StackEntryState
{
    required StackEntryState_Types entry_type = 1;
    required uint32 entry_id = 2;
    oneof entry_data
    {
        bytes stackentry_data = 10;
        uint32 opcode = 11;
        StackEntryState_MultiSig multisig_data = 12;
        StackEntryState_Sig sig_data = 13;
    }
};

message BIP32PublicRoot
{
    required string xpub = 1;
    required uint32 fingerprint = 2;
    repeated uint32 path = 3;
}

message PubkeyBIP32Path
{
    required bytes pubkey = 1;
    required uint32 fingerprint = 2;
    repeated uint32 path = 3;
};

message ScriptSpenderState
{
    required uint32 version_max = 1;
    required uint32 version_min = 2;

    required uint32 legacy_status = 10;
    required uint32 segwit_status = 11;
    required uint32 sighash_type = 12;
    required uint32 sequence = 13;

    required bool is_p2sh = 20;
    required bool is_csv = 21;
    required bool is_cltv = 22;

    oneof output
    {
        Codec_Utxo.Utxo     utxo = 30;
        Codec_Utxo.Outpoint outpoint = 31;
    }

    optional bytes sig_script = 40;
    optional bytes witness_data = 41;

    repeated StackEntryState legacy_stack = 42;
    repeated StackEntryState witness_stack = 43;

    repeated PubkeyBIP32Path bip32Paths = 50;
}

message RecipientState
{
    required bytes data = 1;
    required uint32 groupid = 2;
    repeated PubkeyBIP32Path bip32Paths = 10;
}

message SignerState
{
    required uint32 flags = 1;

    required uint32 tx_version = 10;
    required uint32 locktime = 11;

    repeated ScriptSpenderState spenders = 20;
    repeated RecipientState recipients = 21;
    repeated bytes supportingtx = 22;
    repeated BIP32PublicRoot bip32Roots = 23;
}